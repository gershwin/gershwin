(ns ^{:doc "Gershwin is a stack-based, concatenative programming language with a Clojure runtime targeting the JVM. It combines all of Clojure's semantics with an accompanying API inspired by the Factor programming language."}
  gershwin.core
  (:import [clojure.lang GershwinStack GershwinStack$StackUnderflowException]))

;; ## Clojure Interop ## ;;

(defmacro stack-void
  "The keyword :gershwin.core/stack-void is a special value that the stack will refuse to accept. Use this to evaluate Clojure but to prevent the return value of the Clojure expression from being added to the stack."
  [& body]
  `(do ~@body :gershwin.core/stack-void))

(defmacro add-meta!
  "Utility macro for adding metadata to an existing var. This is required for the definition of `declare-word`, because metadata included inline in the macro definition is not added to the resultant var."
  [name meta]
  `(alter-meta! (var ~name) merge ~meta))

(defmacro declare-word
  "Do name munging to declare a Gershwin word."
  [sym]
  (let [gershwin-sym (-> sym name (str clojure.lang.RT/GERSHWIN_SUFFIX) symbol)]
    `(stack-void
      (declare ~gershwin-sym)
      (add-meta! ~gershwin-sym {clojure.lang.Compiler/wordKey true}))))

(defmacro word-var
  "A macro that provides the equivalent of the #* reader macro. Given a symbol, return the var that references a Gershwin word with the same name."
  [sym]
  (let [gershwin-sym (-> sym name (str clojure.lang.RT/GERSHWIN_SUFFIX) symbol)]
    `(var ~gershwin-sym)))

;; ## Stack Manipulation ##

(defn stack-clear
  "Clear the data stack."
  []
  (GershwinStack/clear))

(defn stack-print
  "Print the contents of the data stack as a seq."
  []
  (prn (clojure.lang.GershwinStack/seq)))

(def clear-stack stack-clear)
(def print-stack stack-print)
(def ps stack-print)

(defn st-peek [] (GershwinStack/peek))

(defn peek* [coll]
  "Like Clojure's peek, but throws an exception if the stack is empty."
  (if (zero? (count coll))
    (throw (GershwinStack$StackUnderflowException. "Data stack underflow. Can't take something off an empty data stack."))
    (peek coll)))

(defn st-pop
  "Call GershwinStack's pop method. Immutable."
  []
  (GershwinStack/pop))

(defn pop-it
  "Remove and return the item on TOS. Mutable."
  []
  (GershwinStack/popIt))

(defn conj-it
  "Conj the item onto the data stack. Mutable."
  [x] (GershwinStack/conjMutable x))

(defn ap
  "Apply the function to n number of items off TOS. Defaults to top item."
  ([a-fn] (ap 1 a-fn))
  ([n a-fn] (apply a-fn (for [_ (range n)] (pop-it)))))

(defn pop-n-swap
  "Remove top two items from TOS, swap, then apply the function."
  [a-fn] (let [a (pop-it) b (pop-it)] (a-fn b a)))

(defn pop-n-swap2
  "x y z --> z y x and pass it that way to a Clojure function."
  [a-fn] (let [z (pop-it) y (pop-it) x (pop-it)] (a-fn x y z)))

;; ## Gershwin & Clojure Versions ##

(let [properties (with-open [version-stream (.getResourceAsStream
                                             (clojure.lang.RT/baseLoader)
                                             "gershwin/version.properties")]
                   (doto (new java.util.Properties)
                     (.load version-stream)))
      version-string (.getProperty properties "version")
      [_ major minor incremental qualifier snapshot]
      (re-matches
       #"(\d+)\.(\d+)\.(\d+)(?:-([a-zA-Z0-9_]+))?(?:-(SNAPSHOT))?"
       version-string)
      gershwin-version {:major       (Integer/valueOf ^String major)
                        :minor       (Integer/valueOf ^String minor)
                        :incremental (Integer/valueOf ^String incremental)
                        :qualifier   (if (= qualifier "SNAPSHOT") nil qualifier)}]
  (def ^{:dynamic true
         :doc "The version info for Gershwin core, as a map containing :major :minor
:incremental and :qualifier keys. Feature releases may increment
:minor and/or :major, bugfix releases will increment :incremental.
Possible values of :qualifier include \"GA\", \"SNAPSHOT\", \"RC-x\" \"BETA-x\""}
    *gershwin-version*
    (if (.contains version-string "SNAPSHOT")
      (clojure.lang.RT/assoc gershwin-version :interim true)
      gershwin-version)))

(defn
  gershwin-version
  "Returns Gershwin version as a printable string."
  {:added "0.2.0"}
  []
  (str (:major *gershwin-version*)
       "."
       (:minor *gershwin-version*)
       (when-let [i (:incremental *gershwin-version*)]
         (str "." i))
       (when-let [q (:qualifier *gershwin-version*)]
         (when (pos? (count q)) (str "-" q)))
       (when (:interim *gershwin-version*)
         "-SNAPSHOT")))

;; ## Stack Printing ##

(def ^:dynamic
  ^{:doc
    "Used at the REPL, if set to true the contents of the data stack will be printed after each read-eval-print loop."}
  *print-stack* true)

;; ## Evaluation ##

(def ^:dynamic
  ^{:doc
    "When true, forms will be wrapped for Gershwin evaluation (data items will be pushed onto the stack, words and quotations will be invoked in place)."}
  *gershwin-eval* true)

(defn gershwin-eval
  "Evaluates the form data structure (not text!) and either places it on the data stack or invokes it (if it is a word or quotation)."
  {:added "0.2.0"}
  [form]
  (if *gershwin-eval*
    (. clojure.lang.Compiler (eval (. clojure.lang.Compiler (wrapGershwinForm form))))
    (. clojure.lang.Compiler (eval form))))

(def ^{:private true
       :doc "Shorter name for easier typing of `gershwin-eval` at REPL, specifically nREPL for which Gershwin integration has not yet been written."}
  ge gershwin-eval)

(defmacro gershwin-symbol
  "Given a symbol, rename it based on Gershwin rename rules for word definitions."
  [sym]
  (let [gershwin-sym (-> sym name (str clojure.lang.RT/GERSHWIN_SUFFIX) symbol)]
    `'~gershwin-sym))

(defmacro ^:private gs
  "Given a symbol, rename it based on Gershwin rename rules for word definitions."
  [sym]
  (let [gershwin-sym (-> sym name (str clojure.lang.RT/GERSHWIN_SUFFIX) symbol)]
    `'~gershwin-sym))

;; ## Gershwin Word Definitions ##

;; ### Invocation/Application ###

: invoke "Invoke an IInvocable (quotations). The quotation itself puts things on the stack, so the result of the invocation itself is ignored."
  [quot -- ...]
  (stack-void (.invoke (pop-it))) ;

: apply "Apply the item on TOS to the second item as an argument. This and its higher-arity counterparts are not designed for quotations, since quotations do not take arguments, but instead to make idiomatic use of Clojure forms that implement IFn.

  Example: {:answer 42} :answer apply"
  [x invocable -- ...]
  (ap (pop-it)) ;

: apply2 "Same as apply, but apply the invocable to top two items on TOS."
  [x y invocable -- ...]
  (ap 2 (pop-it)) ;

: apply3 "Same as apply, but apply the invocable to top three items on TOS."
  [x y z invocable -- ...]
  (ap 3 (pop-it)) ;

: apply-swap "Invoke the IInvocable, apply it to the top two items on TOS after swapping them."
  [x y invocable -- ...]
  (pop-n-swap (pop-it)) ;

: clear "Remove all items from the data stack." [] (stack-void (stack-clear)) ;

: pr "Print TOS in a way that can be re-read by Clojure." [n --] (stack-void (ap pr)) ;

: prn "Print TOS plus a newline in a way that can be re-read by Clojure." [n --] (stack-void (ap prn)) ;

: print "Print TOS in a human-readable fashion." [n --] (stack-void (ap print)) ;

: println "Print TOS plus a newline in a human-readable fashion." [n --] (stack-void (ap println)) ;

: nil? "Returns true if the value on TOS is the value `nil`. You do not need to use this if you are just checking for a truthy/falsey value, as both `nil` and `false` represent falsey values for the purposes of Gershwin/Clojure booleans."
  [x -- ?] (ap nil?) ;

: ^{:added "0.2.0" :doc "Get metadata for TOS. Note that most meaningful metadata is attached to var's that hold the actual values, so you'll need to call `var`"}
  meta
  [x -- y]
  (ap meta) ;

: type "Get an item's type"
  [x -- y]
  (ap type) ;

: class "Get an item's class"
  [x -- y]
  (ap class) ;

: ancestors "Put immediate and indirect parents of item on TOS."
  [x -- coll]
  (ap ancestors) ;

: symbol "Coerce TOS to a symbol"
  [x -- y]
  (ap symbol) ;

: symbol? "True if TOS is a symbol"
  [x -- ?]
  (ap symbol?) ;

: function? "True if TOS is a fn"
  [x -- ?]
  (ap fn?) ;

;; ### Booleans ###

: if
  "The boolean 'if'. Expects both a \"then\" and an \"else\" quotation."
  [? then else -- ...]
  (let [else-quot (pop-it)
        then-quot (pop-it)
        condition (pop-it)]
    (if condition
      (stack-void (.invoke then-quot))
      (stack-void (.invoke else-quot)))) ;

;; ### Shuffle Words ###

;; The basic shuffle words are drop, swap, dup, and rot

: drop "Remove the item at the TOS."
  [x --]
  (stack-void (pop-it)) ;

: . "Convenience binding for `drop`" [x --] drop ;

: swap "Swaps the two items on TOS."
  [x y -- y x]
  (let [y (pop-it)
        x (pop-it)]
    (conj-it y) x) ;

: dup "Duplicate the TOS."
  [x -- x x]
  (st-peek) ;

: rot "Rotate the items on TOS as shown in stack effect. Factor docs note this as deprecated, but it's still used in the definition of core words."
  [x y z -- y z x]
  (let [z (pop-it)
        y (pop-it)
        x (pop-it)]
    (conj-it y) (conj-it z) x) ;



;; ### Basic Math ###

: + "Return the sum of the top two items on TOS."
  [n n -- n] (ap 2 +) ;

: - "Return the difference of the top two items on TOS."
  [n n -- n] (pop-n-swap -) ;

: * "Return the product of the top two items on TOS."
  [n n -- n] (ap 2 *) ;

: div "Return the quotient of the top two items on TOS."
  [n n -- n] (pop-n-swap /) ;

: < "Returns true if a is less than b." [a b -- ?] (pop-n-swap <) ;

: > "Returns true if a is greater than b." [a b -- ?] (pop-n-swap >) ;

: <= "Returns true if a is less than or equal to b." [a b -- ?] (pop-n-swap <=) ;

: >= "Returns true if a is greater than or equal to b." [a b -- ?] (pop-n-swap >=) ;

: odd? "Returns true if the value on TOS is an odd integer." [n -- ?] (ap odd?) ;

: even? "Returns true if the value on TOS is an even integer." [n -- ?] (ap even?) ;

;; ### Equality ###

: = [x x -- ?] (ap 2 =) ;

: == [n n -- ?] (ap 2 ==) ;

(comment
  ;; When working at nREPL, pending better integration
  (set! *gershwin-eval* true)
  (set! *print-stack* true)
  )
