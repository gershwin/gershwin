(ns ^{:doc "Gershwin is a stack-based, concatenative programming language with a Clojure runtime targeting the JVM. It combines all of Clojure's semantics with an accompanying API inspired by the Factor programming language."}
  gershwin.core
  (:import [clojure.lang GershwinStack GershwinStack$StackUnderflowException]))

;; ## Clojure Interop ## ;;

(defmacro stack-void
  "The keyword :gershwin.core/stack-void is a special value that the stack will refuse to accept. Use this to evaluate Clojure but to prevent the return value of the Clojure expression from being added to the stack."
  [& body]
  `(do ~@body :gershwin.core/stack-void))

(defmacro add-meta!
  "Utility macro for adding metadata to an existing var. This is required for the definition of `declare-word`, because metadata included inline in the macro definition is not added to the resultant var."
  [name meta]
  `(alter-meta! (var ~name) merge ~meta))

(defmacro declare-word
  "Do name munging to declare a Gershwin word."
  [sym]
  (let [gershwin-sym (-> sym name (str clojure.lang.RT/GERSHWIN_SUFFIX) symbol)]
    `(stack-void
      (declare ~gershwin-sym)
      (add-meta! ~gershwin-sym {clojure.lang.Compiler/wordKey true}))))

(defmacro word-var
  "A macro that provides the equivalent of the #* reader macro. Given a symbol, return the var that references a Gershwin word with the same name."
  [sym]
  (let [gershwin-sym (-> sym name (str clojure.lang.RT/GERSHWIN_SUFFIX) symbol)]
    `(var ~gershwin-sym)))

(defmacro time-took
  "Like Clojure's `time`, but returns a map with two keys, :time with the time in milliseconds and :result with the return value of the expression."
  [expr]
  `(let [start# (. System (nanoTime))
         ret# ~expr]
     (hash-map :time (/ (double (- (. System (nanoTime)) start#)) 1000000.0)
               :result ret#)))

;; ## Stack Manipulation ##

(defn stack-clear
  "Clear the data stack."
  []
  (GershwinStack/clear))

(defn stack-print
  "Print the contents of the data stack as a seq."
  []
  (prn (clojure.lang.GershwinStack/seq)))

(def clear-stack stack-clear)
(def print-stack stack-print)
(def ps stack-print)

(defn st-peek [] (GershwinStack/peek))

(defn peek* [coll]
  "Like Clojure's peek, but throws an exception if the stack is empty."
  (if (zero? (count coll))
    (throw (GershwinStack$StackUnderflowException. "Data stack underflow. Can't take something off an empty data stack."))
    (peek coll)))

(defn st-pop
  "Call GershwinStack's pop method. Immutable."
  []
  (GershwinStack/pop))

(defn pop-it
  "Remove and return the item on TOS. Mutable."
  []
  (GershwinStack/popIt))

(defn conj-it
  "Conj the item onto the data stack. Mutable."
  [x] (GershwinStack/conjMutable x))

(defn ap
  "Apply the function to n number of items off TOS. Defaults to top item."
  ([a-fn] (ap 1 a-fn))
  ([n a-fn] (apply a-fn (for [_ (range n)] (pop-it)))))

(defn pop-n-swap
  "Remove top two items from TOS, swap, then apply the function."
  [a-fn] (let [a (pop-it) b (pop-it)] (a-fn b a)))

(defn pop-n-swap2
  "x y z --> z y x and pass it that way to a Clojure function."
  [a-fn] (let [z (pop-it) y (pop-it) x (pop-it)] (a-fn x y z)))

(defn pop-n-swap3
  "w x y z --> z y x w and pass it that way to a Clojure function."
  [a-fn] (let [[z y x w] [(pop-it) (pop-it) (pop-it) (pop-it)]] (a-fn w x y z)))

;; ## Gershwin & Clojure Versions ##

(let [properties (with-open [version-stream (.getResourceAsStream
                                             (clojure.lang.RT/baseLoader)
                                             "gershwin/version.properties")]
                   (doto (new java.util.Properties)
                     (.load version-stream)))
      version-string (.getProperty properties "version")
      [_ major minor incremental qualifier snapshot]
      (re-matches
       #"(\d+)\.(\d+)\.(\d+)(?:-([a-zA-Z0-9_]+))?(?:-(SNAPSHOT))?"
       version-string)
      gershwin-version {:major       (Integer/valueOf ^String major)
                        :minor       (Integer/valueOf ^String minor)
                        :incremental (Integer/valueOf ^String incremental)
                        :qualifier   (if (= qualifier "SNAPSHOT") nil qualifier)}]
  (def ^{:dynamic true
         :doc "The version info for Gershwin core, as a map containing :major :minor
:incremental and :qualifier keys. Feature releases may increment
:minor and/or :major, bugfix releases will increment :incremental.
Possible values of :qualifier include \"GA\", \"SNAPSHOT\", \"RC-x\" \"BETA-x\""}
    *gershwin-version*
    (if (.contains version-string "SNAPSHOT")
      (clojure.lang.RT/assoc gershwin-version :interim true)
      gershwin-version)))

(defn
  gershwin-version
  "Returns Gershwin version as a printable string."
  {:added "gershwin-0.2.0"}
  []
  (str (:major *gershwin-version*)
       "."
       (:minor *gershwin-version*)
       (when-let [i (:incremental *gershwin-version*)]
         (str "." i))
       (when-let [q (:qualifier *gershwin-version*)]
         (when (pos? (count q)) (str "-" q)))
       (when (:interim *gershwin-version*)
         "-SNAPSHOT")))

;; ## Stack Printing ##

(def ^:dynamic
  ^{:doc
    "Used at the REPL, if set to true the contents of the data stack will be printed after each read-eval-print loop."}
  *print-stack* true)

;; ## Evaluation ##

(def ^:dynamic
  ^{:doc
    "When true, forms will be wrapped for Gershwin evaluation (data items will be pushed onto the stack, words and quotations will be invoked in place)."}
  *gershwin-eval* true)

(defn gershwin-eval
  "Evaluates the form data structure (not text!) and either places it on the data stack or invokes it (if it is a word or quotation)."
  {:added "gershwin-0.2.0"}
  [form]
  (if *gershwin-eval*
    (. clojure.lang.Compiler (eval (. clojure.lang.Compiler (wrapGershwinForm form))))
    (. clojure.lang.Compiler (eval form))))

(def ^{:private true
       :doc "Shorter name for easier typing of `gershwin-eval` at REPL, specifically nREPL for which Gershwin integration has not yet been written."}
  ge gershwin-eval)

(defmacro with-gershwin
  "Allow including code that follows Gershwin semantics within Clojure code."
  [& body]
  `(stack-void (.invoke #[ ~@body ])))

(defmacro gershwin-symbol
  "Given a symbol, rename it based on Gershwin rename rules for word definitions."
  [sym]
  (let [gershwin-sym (-> sym name (str clojure.lang.RT/GERSHWIN_SUFFIX) symbol)]
    `'~gershwin-sym))

(defmacro ^:private gs
  "Given a symbol, rename it based on Gershwin rename rules for word definitions."
  [sym]
  (let [gershwin-sym (-> sym name (str clojure.lang.RT/GERSHWIN_SUFFIX) symbol)]
    `'~gershwin-sym))

;; ## Gershwin Word Definitions ##

;; ### Invocation/Application ###

: invoke "Invoke an IInvocable (quotations). The quotation itself puts things on the stack, so the result of the invocation itself is ignored."
  [quot -- ...]
  (stack-void (.invoke (pop-it))) .

: apply "Apply the item on TOS to the second item as an argument. This and its higher-arity counterparts are not designed for quotations, since quotations do not take arguments, but instead to make idiomatic use of Clojure forms that implement IFn.

  Example: {:answer 42} :answer apply"
  [x invocable -- ...]
  (ap (pop-it)) .

: apply2 "Same as apply, but apply the invocable to top two items on TOS."
  [x y invocable -- ...]
  (ap 2 (pop-it)) .

: apply3 "Same as apply, but apply the invocable to top three items on TOS."
  [x y z invocable -- ...]
  (ap 3 (pop-it)) .

: apply-swap "Invoke the IInvocable, apply it to the top two items on TOS after swapping them."
  [x y invocable -- ...]
  (pop-n-swap (pop-it)) .

;; ### Namespaces ###

: in-ns "Change to the specific namespace, creating it if needed."
  [ns --]
  (stack-void (ap in-ns)) .

: find-ns [sym -- ns] (ap find-ns) .

: create-ns [sym -- ns] (ap create-ns) .

;; TODO Guard Gershwin the same way Clojure is guarded.
: remove-ns [sym --] (ap remove-ns) .

: all-ns [-- nss] (all-ns) .

: the-ns "If passed a namespace, returns it. Else, when passed a symbol, returns the namespace named by it, throwing an exception if not found."
  [x -- ns]
  (ap the-ns) .

: ns-name [ns -- name-as-sym] (ap ns-name) .

: ns-map [ns -- mappings] (ap ns-map) .

: ns-unmap [sym ns -- mappings] (ap 2 ns-unmap) .

: ns-publics [ns -- mappings] (ap ns-publics) .

: ns-imports [ns -- import-mappings] (ap ns-imports) .

: ns-interns [ns -- intern-mappings] (ap ns-interns) .

;; TODO Consider refer and other namespace setup mechanisms, since they're primarily
;;      used and exposed via the ns macro.

: ns-refers [ns -- refer-mappings] (ap ns-refers) .

: alias [alias namespace-sym --] (pop-n-swap alias) .

: ns-aliases [ns -- alias-mappins] (ap ns-aliases) .

: ns-unalias [alias ns --] (ap 2 ns-unalias) .

: pr "Print TOS in a way that can be re-read by Clojure." [n --] (stack-void (ap pr)) .

: newline [] (stack-void (newline)) .

: flush [] (stack-void (flush)) .

: prn "Print TOS plus a newline in a way that can be re-read by Clojure." [n --] (stack-void (ap prn)) .

: print "Print TOS in a human-readable fashion." [n --] (stack-void (ap print)) .

: println "Print TOS plus a newline in a human-readable fashion." [n --] (stack-void (ap println)) .

: read "Read the next object from stream. Currently defaults to Clojure's default extra arguments to read, namely that EOF is an error, the EOF value is `nil`, and reading is not recursive."
  [stream -- obj]
  (read (pop-it) true nil false) .

: read-line "Reads the next line from stream that is the current value of `*in*` as a String (uses readLine() method of reader for `*in*`)."
  [] (read-line) .

: read-string "Reads one object from the string `s`."
  [s -- obj]
  (ap read-string) .

: load-reader [rdr -- obj] (ap load-reader) .

: load-string [s -- obj] (ap load-string) .

: nil? "Returns true if the value on TOS is the value `nil`. You do not need to use this if you are just checking for a truthy/falsey value, as both `nil` and `false` represent falsey values for the purposes of Gershwin/Clojure booleans."
  [x -- ?] (ap nil?) .

: meta "Get metadata for TOS. Note that most meaningful metadata is attached to var's that hold the actual values, so you'll need to call `var`"
  [x -- y]
  (ap meta) .

: type "Get an item's type"
  [x -- y]
  (ap type) .

: class "Get an item's class"
  [x -- y]
  (ap class) .

: with-meta
  [meta obj -- obj]
  (ap 2 with-meta) .

: ancestors "Put immediate and indirect parents of item on TOS."
  [x -- coll]
  (ap ancestors) .

: symbol "Coerce TOS to a symbol"
  [x -- y]
  (ap symbol) .

: symbol? "True if TOS is a symbol"
  [x -- ?]
  (ap symbol?) .

: keyword? [x -- ?] (ap keyword?) .

: symbol [x -- sym] (ap symbol) .

: symbol-with-ns [name ns] (ap 2 symbol) .

: gensym [-- sym] (gensym) .

: gensym-with-prefix [prefix -- sym] (ap gensym) .

: keyword [x -- sym] (ap keyword) .

: keyword-with-ns [name ns] (ap 2 keyword) .

: find-keyword [kw -- kw-or-nil] (ap find-keyword) .

: find-keyword-with-ns [kw ns -- kw-or-nil] (ap 2 find-keyword) .

: function? "True if TOS is a fn"
  [x -- ?]
  (ap fn?) .

: num "Coerce to number" [x -- n] (ap num) .

: long "Coerce to long" [x -- l] (ap long) .

: float "Coerce to float" [x -- f] (ap float) .

: double "Coerce to double" [x -- d] (ap double) .

: short "Coerce to short" [x -- sh] (ap short) .

: byte "Coerce to byte" [x -- b] (ap byte) .

: char "Coerce to char" [x -- ch] (ap char) .

: unchecked-byte "Coerce to byte. Subject to rounding or truncation."
  [x -- b]
  (ap unchecked-byte) .

: unchecked-short "Coerce to short. Subject to rounding or truncation."
  [x -- sh]
  (ap unchecked-short) .

: unchecked-char "Coerce to char. Subject to rounding or truncation."
  [x -- ch]
  (ap unchecked-char) .

: unchecked-int "Coerce to int. Subject to rounding or truncation."
  [x -- i]
  (ap unchecked-int) .

: unchecked-long "Coerce to long. Subject to rounding or truncation."
  [x -- l]
  (ap unchecked-long) .

: unchecked-float "Coerce to float. Subject to rounding or truncation."
  [x -- f]
  (ap unchecked-float) .

: unchecked-double "Coerce to double. Subject to rounding or truncation."
  [x -- d]
  (ap unchecked-double) .

: number? [x -- ?] (ap number?) .

: mod [num div -- modulus] (pop-n-swap mod) .

: ratio? [x -- ?] (ap ratio?) .

: numerator [r -- n] (ap numerator) .

: denominator [r -- n] (ap denominator) .

: decimal? [x -- ?] (ap decimal?) .

: float? [x -- ?] (ap float?) .

: rational? [x -- ?] (ap rational?) .

: bigint "Coerce to BigInteger" [x -- bn] (ap bigint) .

: bigdec "Coerce to BigDecimal" [x -- bd] (ap bigdec) .

;; ### Shuffle Words ###

;; The basic shuffle words are drop, swap, dup, and rot

: drop "Remove the item at the TOS."
  [x --]
  (stack-void (pop-it)) .

: ! "Convenience binding for `drop`" [x --] drop .

: clear "Remove all items from the data stack." [] (stack-void (stack-clear)) .

: swap "Swaps the two items on TOS."
  [x y -- y x]
  (let [y (pop-it)
        x (pop-it)]
    (conj-it y) x) .

: dup "Duplicate the TOS."
  [x -- x x]
  (st-peek) .

: rot "Rotate the items on TOS as shown in stack effect. Factor docs note this as deprecated, but it's still used in the definition of core words."
  [x y z -- y z x]
  (let [z (pop-it)
        y (pop-it)
        x (pop-it)]
    (conj-it y) (conj-it z) x) .

;; ### Factor Extensions to Shuffle Words ###

;; These include: drop2, drop3, nip, nip2, dup2, dup3, over, over2, pick
;; Note: 'pick' differs from what it might mean in most Forths
;; TODO Factor implements these as primitives, even though they could be implemented
;;   with the basic shuffle words above. Consider.

: drop2 "Remove top two items from TOS."
  [x y --]
  drop drop .

: drop3 "Remove top three items from TOS."
  [x y z --]
  drop drop drop .

: nip "Remove second element from TOS."
  [x y -- y]
  swap drop .

: nip2 "Remove second and third elements from TOS."
  [x y z -- z]
  swap drop swap drop .

: dup2 "Duplicate top two items on TOS."
  [x y -- x y x y]
  (let [y (st-peek)
        x (peek* (st-pop))]
    (conj-it x) y) .

: dup3 "Duplicate top three items on TOS."
  [x y z -- x y z x y z]
  (let [cdr (st-pop)
        cddr (pop cdr)
        z (st-peek)
        y (peek* cdr)
        x (peek* cddr)]
    (conj-it x) (conj-it y) z) .

: over "Duplicate second item on TOS."
  [x y -- x y x]
  (peek* (st-pop)) .

: over2 "Duplicate second and third items on TOS."
  [x y z -- x y z x y]
  (let [cdr (st-pop)
        cddr (pop cdr)
        y (peek* cdr)
        x (peek* cddr)]
    (conj-it x) y) .

: pick "Duplicate third item on TOS."
  [x y z -- x y z x]
  (peek* (pop (st-pop))) .

;; ### Booleans ###

: if
  "The boolean 'if'. Expects both a \"then\" and an \"else\" quotation."
  [? then else -- ...]
  (let [else-quot (pop-it)
        then-quot (pop-it)
        condition (pop-it)]
    (if condition
      (stack-void (.invoke then-quot))
      (stack-void (.invoke else-quot)))) .

: if* "Like `if`, but keeps the conditional value on the stack if it is truthy."
  [? true false -- ...]
  pick #[ drop invoke ] #[ nip2 invoke ] if .

: if-not
  [? then else -- ...]
  swap if .

: when
  "'if' with no 'else' branch"
  [? then -- ...]
  #[ ] if .

: when-not
  [? then -- ...]
  #[ ] if-not .

: ? "Choose between t or f depending on truthiness of ?"
  [? t f]
  rot #[ drop ] #[ nip ] if .

: and "If both values are true, outputs TOS. Else returns false."
  [x y -- ?]
  over ? .

: boolean [x -- ?] #[ true ] #[ false ] if .

(declare-word dupd)
: or "Outputs first truthy value, or false if neither is truthy."
  [x y -- ?]
  dupd ? dup #[ boolean ] when-not .

: true? [? -- ?] (ap true?) .

: false? [? -- ?] (ap false?) .

: not [obj -- ?] "Returns true if x is logical false, false otherwise." (ap not) .

;; ## Dataflow Combinators ##

;; #### Preservering combinators ####

: dip "Remove second item from TOS, execute the quotation on TOS, then restore second item on TOS."
  [x quot -- x]
  (let [quot (pop-it)
        x (pop-it)]
    (.invoke quot)
    x) .

: dip2 "Remove the second and third items from TOS, execute the quotation on TOS, then restore the second and third items on TOS."
  [x y quot -- x y]
  swap #[ dip ] dip .

: dip3 "Remove the second, third, and fourth items from TOS, execute the quotation on TOS, then restore the second, third, and fourth items on TOS."
  [x y z quot -- x y z]
  swap #[ dip2 ] dip .

: dip4 "Remove the second, third, and fourth items from TOS, execute the quotation on TOS, then restore the second, third, and fourth items on TOS."
  [w x y z quot -- w x y z]
  swap #[ dip3 ] dip .

: dupd "Duplicate second item on TOS in-place."
  [x y -- x x y]
  #[ dup ] dip .

: keep "As opposed to dip, which removes the second item before executing the quotation, keep keeps the second item on the stack for the quotation's invocation, but then also adds it back again after the quotation has been executed."
  [..a x quot -- ( ..a x -- ..b ) -- ..b x]
  over #[ invoke ] dip .

: keep2 "Like keep, but restores first and second items on TOS after invoking quotation with them."
  [..a x y quot ( ..a x y -- ..b ) -- ..b x y]
  #[ dup2 ] dip dip2 .

: keep3 "Like keep, but restores first, second, and third items on TOS after invoking quotation with them."
  [..a x y z quot ( ..a x y z -- ..b ) -- ..b x y z]
  #[ dup3 ] dip dip3 .

;; #### Cleave combinators ####

;; Cleave operators mean: take a single piece of data and apply n number of quotations to it. These are common patterns for repeated uses of `keep`, which should be evident from their implementation.

: bi "Invoke the two quotations on TOS sequentially with the third item on TOS present for both invocations."
  [x p q --]
  #[ keep ] dip invoke .

: bi2 "Same as bi, but work with two pieces of data."
  [x y p q --]
  #[ keep2 ] dip invoke .

: bi3 "Same as bi, but work with three pieces of data."
  [x y z p q --]
  #[ keep3 ] dip invoke .

: tri "Invoke the three quotations on TOS sequentially with the third item on TOS present for all invocations."
  [x p q r --]
  #[ #[ keep ] dip keep ] dip invoke .

: tri2 "Same as tri, but work with two pieces of data."
  [x y p q r --]
  #[ #[ keep2 ] dip keep2 ] dip invoke .

: tri3 "Same as tri, but work with three pieces of data."
  [x y z p q r --]
  #[ #[ keep3 ] dip keep3 ] dip invoke .

;; NOTE: The `cleave` word requires words we haven't implemented yet. Punting til later.

;; #### Spread combinators ####

;; Spread combinators apply n number of quotations to n (or 2*n) number of values. These are common patterns for repeated uses of dip. The asterisk `*` denotes spread combinators.

: bi* "Apply the two quotations to the two values in order."
  [x y p q --]
  #[ dip ] dip invoke .

: bi2* "Apply p to w and x, then apply q to y and z."
  [w x y z p q --]
  #[ dip2 ] dip invoke .

: tri* "Apply p to x, q to y, and r to z"
  [x y z p q r --]
  #[ #[ dip2 ] dip dip ] dip invoke .

: tri2* "Apply p to u and v, q to w and x, and r to y and z"
  [u v w x y z p q r --]
  #[ dip4 ] dip2 bi2* .

;; ### Apply combinators ###

;; Apply combinators apply a single quotation to multiple values. In this way, they are equivalent to using the spread combinators with each quotation being identical. The ampersand `&` denotes apply combinators (The `@` from Factor cannot be used as a Clojure:Gershwin symbol character).

: bi& "Apply the quotation to the top two items on TOS in order."
  [x y quot --]
  dup bi* .

: bi2& "Apply the quotation to w and x, and then y and z."
  [w x y z quot --]
  dup bi2* .

: tri& "Apply the quotation to the top three items on TOS in order."
  [x y z quot --]
  dup dup tri* .

: tri2& "Apply the quotation to u and v, then to w and x, and finally to y and z."
  [u v w x y z quot --]
  dup dup tri2* .

: both? "Returns truthy if application of quotation to both values is truthy in each case."
  [x y quot -- ?]
  bi& and .

: either? "Returns truthy if either application of quotation produces a truthy value."
  [x y quot -- ?]
  bi& or .

;; ### Basic Math ###

: + "Return the sum of the top two items on TOS."
  [n n -- n] (ap 2 +) .

: +' "Return the sum of the top two items on TOS. Supports arbitrary precision."
  [n n -- n] (ap 2 +') .

: - "Return the difference of the top two items on TOS."
  [n n -- n] (pop-n-swap -) .

: -' "Return the difference of the top two items on TOS. Supports arbitrary precision."
  [n n -- n] (pop-n-swap -') .

: * "Return the product of the top two items on TOS."
  [n n -- n] (ap 2 *) .

: *' "Return the product of the top two items on TOS. Support arbitrary precision."
  [n n -- n] (ap 2 *') .

: div "Return the quotient of the top two items on TOS."
  [n n -- n] (pop-n-swap /) .

: < "Returns true if a is less than b." [a b -- ?] (pop-n-swap <) .

: > "Returns true if a is greater than b." [a b -- ?] (pop-n-swap >) .

: <= "Returns true if a is less than or equal to b." [a b -- ?] (pop-n-swap <=) .

: >= "Returns true if a is greater than or equal to b." [a b -- ?] (pop-n-swap >=) .

: inc "Increment number on TOS by one."
  [n -- n] (ap inc) .

: inc' "Increment number on TOS by one. Supports arbitrary precision."
  [n -- n] (ap inc') .

: dec "Decrement number on TOS by one."
  [n -- n] (ap dec) .

: dec' "Decrement number on TOS by one. Supports arbitrary precision."
  [n -- n] (ap dec') .

: unchecked-inc-int [n -- n] (ap unchecked-inc-int) .
: unchecked-inc [n -- n] (ap unchecked-inc) .
: unchecked-dec-int [n -- n] (ap unchecked-dec-int) .
: unchecked-dec [n -- n] (ap unchecked-dec) .
: unchecked-negate-int [n -- n] (ap unchecked-negate-int) .
: unchecked-negate [n -- n] (ap unchecked-negate) .
: unchecked-add-int [a b -- n] (ap 2 unchecked-add-int) .
: unchecked-add [a b -- n] (ap 2 unchecked-add) .
: unchecked-subtract-int [a b -- n] (pop-n-swap unchecked-subtract-int) .
: unchecked-subtract [a b -- n] (pop-n-swap unchecked-subtract) .
: unchecked-multiply-int [a b -- n] (ap 2 unchecked-multiply-int) .
: unchecked-multiply [a b -- n] (ap 2 unchecked-multiply) .
: unchecked-divide-int [a b -- n] (pop-n-swap unchecked-divide-int) .
: unchecked-remainder-int [a b -- n] (pop-n-swap unchecked-remainder-int) .

;; Renamed to full 'quotient' to avoid any confusion with Gershwin quotations
: quotient [num div -- n] (pop-n-swap quot) .

: rem [num div -- n] (pop-n-swap rem) .

: rationalize [n -- n] (ap rationalize) .

: pos? [n -- ?] (ap pos?) .

: neg? [n -- ?] (ap neg?) .

: zero? "Returns true if the value on TOS is zero." [n -- ?] (ap zero?) .

: max "Returns the greatest of the two nums on TOS."
  [a b -- n] (ap 2 max) .

: min "Returns the least of the two nums on TOS."
  [a b -- n] (ap 2 min) .

: odd? "Returns true if the value on TOS is an odd integer." [n -- ?] (ap odd?) .

: even? "Returns true if the value on TOS is an even integer." [n -- ?] (ap even?) .

: integer? [n -- ?] (ap integer?) .

;; ### Bit operations ###

: bit-not [x -- n] (ap bit-not) .

: bit-and [x y -- n] (pop-n-swap bit-and) .

: bit-or [x y -- n] (pop-n-swap bit-or) .

: bit-xor [x y -- n] (pop-n-swap bit-xor) .

: bit-and-not [x y -- n] (pop-n-swap bit-and-not) .

: bit-clear [idx x -- n] (ap 2 bit-clear) .

: bit-set [idx x -- n] (ap 2 bit-set) .

: bit-flip [idx x -- n] (ap 2 bit-flip) .

: bit-test [idx x -- n] (ap 2 bit-test) .

: bit-shift-left [n x -- n] (ap 2 bit-shift-left) .

: bit-shift-right [n x -- n] (ap 2 bit-shift-right) .

;;

;; complement, constantly

: identity [x -- x] (st-peek) .

;; ### Equality ###

: = [x x -- ?] (ap 2 =) .

: == [n n -- ?] (ap 2 ==) .

;; ### Sequences, Collections ###

: perst-peek [coll] (ap peek) .

: perst-pop [coll] (ap pop) .

: get [key m -- x] (ap 2 get) .

: alength [arr -- n] (ap alength) .

: aclone "Clone the Java array on TOS."
  [arr -- arr]
  (ap aclone) .

: aget [idx java-array -- x] (ap 2 aget) .

: aset [val idx arr -- arr] (ap 3 aset) .

: aset-int [int idx arr -- arr] (ap 3 aset-int) .

: aset-long [long idx arr -- arr] (ap 3 aset-long) .

: aset-boolean [boolean idx arr -- arr] (ap 3 aset-boolean) .

: aset-float [float idx arr -- arr] (ap 3 aset-float) .

: aset-double [double idx arr -- arr] (ap 3 aset-double) .

: aset-short [short idx arr -- arr] (ap 3 aset-short) .

: aset-byte [byte idx arr -- arr] (ap 3 aset-byte) .

: aset-char [char idx arr -- arr] (ap 3 aset-char) .

: make-array [length type -- arr] (ap 2 make-array) .

;; TODO Add helpers for multidimensional arrays

: to-array-2d [coll -- arr] (ap to-array-2d) .

: macroexpand-1 [form -- form] (ap macroexpand-1) .

: macroexpand [form -- form] (ap macroexpand) .

: create-struct [k -- struct] (ap create-struct) .

: create-struct2 [k1 k2 -- struct] (ap 2 create-struct) .

: create-struct3 [k1 k2 k3 -- struct] (ap 3 create-struct) .

: create-struct4 [k1 k2 k3 k4 -- struct] (ap 4 create-struct) .

: create-struct* [ks -- struct] (apply create-struct (pop-it)) .

;; TODO Rest of struct handling here.

: first [coll -- x] (ap first) .

: next [coll -- x] (ap next) .

: rest [coll -- coll] (ap rest) .

: conj [x coll -- coll] (ap 2 conj) .

: cons [x coll -- coll] (pop-n-swap cons) .

: second [coll -- x] (ap second) .

: ffirst [coll -- x] (ap ffirst) .

: nfirst [coll -- x] (ap nfirst) .

: fnext [coll -- coll] (ap fnext) .

: nnext [coll -- coll] (ap nnext) .

: seq [coll -- seq] (ap seq) .

: reverse [coll -- coll] (ap reverse) .

: instance? [obj -- ?] (ap instance?) .

: seq? [obj -- ?] (ap seq?) .

: char? [obj -- ?] (ap char?) .

: string? [obj -- ?] (ap string?) .

: map? [obj -- ?] (ap map?) .

: vector? [obj -- ?] (ap vector?) .

: last [coll -- x] (ap last) .

: butlast [coll -- coll] (ap butlast) .

: cast [obj class -- obj] (ap 2 cast) .

: to-array [coll -- array] (ap to-array) .

: vector [a -- v] (ap vector) .

: vector2 [a b -- v] (pop-n-swap vector) .

: vector3 [a b c -- v] (pop-n-swap2 vector) .

: vector4 [a b c d -- v] (pop-n-swap3 vector) .

: vector* [xs -- v] (ap vec) .

: vec [coll -- v] (ap vec) .

: subvec-from "Creates subvector from start index to end of vector."
  [start v -- v] (ap 2 subvec) .

: subvec "Creates a subvector from start (inclusive) to end (exclusive)."
  [start end v -- v]
  (let [[v end start] [(pop-it) (pop-it) (pop-it)]]
    (subvec v start end)) .

: hash-map [v k -- m] (ap 2 hash-map) .

: hash-map2 [v1 k1 v2 k2 -- m] (ap 4 hash-map) .

: hash-map* [vks -- m] (apply hash-map (pop-it)) .

: hash-set [a -- set] (ap hash-set) .

: hash-set2 [a b -- set] (ap 2 hash-set) .

: hash-set3 [a b c -- set] (ap 3 hash-set) .

: hash-set4 [a b c d -- set] (ap 4 hash-set) .

: hash-set* [xs -- set] (apply hash-set (pop-it)) .

: sorted-map [v k -- m] (ap 2 sorted-map) .

: sorted-map2 [v1 k1 v2 k2 -- m] (ap 4 sorted-map) .

: sorted-map* [vks -- m] (apply sorted-map (pop-it)) .

: sorted-map-by "For now, the comparator is a Clojure function. PersistentTreeMap expects a Comparator, which clojure.lang.AFunction already implements."
  [v k comparator -- m] (ap 3 sorted-map-by) .

: sorted-map-by2 [v1 k1 v2 k2 comparator -- m] (ap 5 sorted-map-by) .

: sorted-map-by* [vks comparator -- m] (apply sorted-map-by (pop-it) (pop-it)) .

: set [coll -- set] (ap set) .

: sorted-set [a -- set] (ap sorted-set) .

: sorted-set2 [a b -- set] (ap 2 sorted-set) .

: sorted-set3 [a b c -- set] (ap 3 sorted-set) .

: sorted-set4 [a b c d -- set] (ap 4 sorted-set) .

: sorted-set* [xs -- set] (apply sorted-set (pop-it)) .

: sorted-set-by "For now, the comparator is a Clojure function. PersistentTreeSet expects a Comparator, which clojure.lang.AFunction already implements."
  [a comparator -- set] (ap 2 sorted-set-by) .

: sorted-set-by2 [a b comparator -- set] (ap 3 sorted-set-by) .

: sorted-set-by3 [a b c comparator -- set] (ap 4 sorted-set-by) .

: sorted-set-by4 [a b c d comparator -- set] (ap 5 sorted-set-by) .

: sorted-set-by* [xs comparator -- set] (apply sorted-set-by (pop-it) (pop-it)) .

: list* "Short-cut for nested consing."
  [x -- l] (ap list*) .

: list*2 [x coll -- l] (pop-n-swap list*) .

: list*3 [x y coll -- l] (pop-n-swap2 list*) .

: list*4 [x y z coll -- l] (pop-n-swap3 list*) .

: peek [vector -- x] (ap peek) .

: assoc [v k coll -- coll] (ap 3 assoc) .

: dissoc [k coll -- coll] (ap 2 dissoc) .

: dissoc-keys [ks coll -- coll]
  (let [coll (pop-it)
        ks (pop-it)]
    (apply dissoc coll ks)) .

: disj [k set -- set] (ap 2 disj) .

: disj-keys [ks set -- set]
  (let [set (pop-it)
        ks (pop-it)]
    (apply disj set ks)) .

: keys [coll -- coll] (ap keys) .

: values [coll -- coll] (ap vals) .

: get-in [keys m -- x]
  (ap 2 get-in) .

;; Arg order like assoc ?
: update-in [quot keys coll]
  (let [coll (pop-it)
        keys (pop-it)
        quot (pop-it)]
    (conj-it (get-in coll keys))
    (.invoke quot)
    (assoc-in coll keys (pop-it))) .

: nth [n coll -- x] (ap 2 nth) .

: count [coll -- n] (ap count) .

: alength [java-array -- n] (ap alength) .

: empty? [coll -- ?] (ap empty?) .

: contains?
  [item coll -- ?]
  (ap 2 contains?) .

: some "Puts the first truthy value generated from invoking the given quotation for each item in the collection, else puts nil on TOS."
  [coll quot]
  (let [quot (pop-it)
        coll (pop-it)]
    (loop [coll coll]
      (if (seq coll)
        (do
          (conj-it (first coll))
          (.invoke quot)
          (if (pop-it)
            (first coll)
            (recur (rest coll))))
        nil))) .

: has-any? "Same as member?, but expects a collection of items to check for instead of a single one."
  [subcoll coll -- item-or-nil]
  swap clojure.core/set apply clojure.core/some apply2 .

: member? "For everyone who thinks (some #{:foo} coll) is a rare departure from Clojure's otherwise pragmatic nature. Behaves like (some #{:foo} coll), returning the item being asked about if present or nil otherwise."
  [item coll -- item-or-nil]
  swap [] conj swap has-any? .

: map "Invoke the quotation for each element in the collection, putting the new collection of these results on TOS."
  [coll quot -- coll]
  (let [quot (pop-it)
        coll (pop-it)]
    (lazy-seq
     (loop [coll coll final []]
       (if (seq coll)
         (do
           (conj-it (first coll))
           (.invoke quot)
           (recur (rest coll) (conj final (pop-it))))
         final)))) .

: reduce "Given a collection and a quotation that expects two items off the stack, calls the quotation with the first two items of the collection, followed by invoking the quotation using that result and subsequent items from the collection.

If the collection is empty, returns nil. If the collection contains only one item, that item is put on TOS and the quotation is not invoked."
  [coll quot -- coll]
  (let [quot (pop-it)
        coll (pop-it)]
    (cond
     (empty? coll) nil

     (= (count coll) 1) (first coll)

     :else
     (do (conj-it (first coll))
         (conj-it (second coll))
         (.invoke quot)
         (if (> (count coll) 2)
           (loop [coll (rest (rest coll))]
             (if (seq coll)
               (do
                 (conj-it (first coll))
                 (.invoke quot)
                 (recur (rest coll)))
               ::stack-void))
           ::stack-void)))) .

: reduce-with "Like reduce, but begins the reduction by invoking the quotation using the specified \"accumulator\" and the first item from the collection, instead of the first two items from the collection like `reduce` does."
  [coll acc quot -- coll]
  (let [quot (pop-it)
        acc  (pop-it)
        coll (pop-it)]
    (cond
     (empty? coll) nil

     (= (count coll) 1) (first coll)

     :else
     (do (conj-it acc)
         (conj-it (first coll))
         (.invoke quot)
         (if (> (count coll) 2)
           (loop [coll (rest coll)]
             (if (seq coll)
               (do
                 (conj-it (first coll))
                 (.invoke quot)
                 (recur (rest coll)))
               ::stack-void))
           ::stack-void)))) .


: filter "Replace the collection with one including only those items that return truthy for the given predicate quotation."
  [coll pred-quot -- coll]
  (let [quot (pop-it)
        coll (pop-it)]
    (lazy-seq
     (loop [coll coll final []]
       (if (seq coll)
         (do
           (conj-it (first coll))
           (.invoke quot)
           (if (pop-it)
             (recur (rest coll) (conj final (first coll)))
             (recur (rest coll) final)))
         final)))) .

: remove "Opposite of filter. Replace collection with one including only those items that return falsey for the given predicate."
  [coll pred-quot -- coll]
  (let [quot (pop-it)
        coll (pop-it)]
    (lazy-seq
     (loop [coll coll final []]
       (if (seq coll)
         (do
           (conj-it (first coll))
           (.invoke quot)
           (if-not (pop-it)
             (recur (rest coll) (conj final (first coll)))
             (recur (rest coll) final)))
         final)))) .

: take "Put a lazy collection on TOS that consists of the first n items from the original collection."
  [coll n -- coll]
  (ap 2 take) .

;; ### String & Regular Expressions ###

: str "Stringify the given item on TOS."
  [x -- s]
  (ap str) .

: str2 "Concatenate the top two items as strings."
  [s s -- s]
  (pop-n-swap str) .

: str3 "Concatenate the top three items as strings."
  [s s s -- s]
  (pop-n-swap2 str) .

: re-pattern "Given a String, put a java.util.Pattern object on TOS. Note that you need to double-escape things per Java's Pattern requirements."
  [s -- r]
  (ap re-pattern) .

: with-out-str "Invokes the given quotation, binding *out* to a fresh StringWriter and puting its String value on TOS."
  [quot -- s]
  (with-out-str (.invoke (pop-it))) .
