(ns gershwin.test-gershwin.core
  (:require-words [gershwin.test :refer [unit-test]]))

: suite [-- ?]
  ;; Invocation/Application
  #[ 42 ] #[ {:answer 42} :answer apply ] unit-test
  #[ 42 ] #[ 21 21 clojure.core/+ apply2 ] unit-test
  #[ "bazbarfoo" ] #[ "foo" "bar" "baz" clojure.core/str apply3 ] unit-test
  #[ 1 ] #[ 3 2 clojure.core/- apply-swap ] unit-test

  ;; Types, Metadata
  #[ true ] #[ 'foo symbol? ] unit-test
  #[ false ] #[ :foo symbol? ] unit-test
  #[ true ] #[ (fn [] 42) function? ] unit-test
  #[ false ] #[ :foo function? ] unit-test
  #[ false ] #[ "foo" function? ] unit-test
  #[ 42 ] #[ 42 num ] unit-test
  #[ 42.0 ] #[ 42 float ] unit-test
  #[ 42N ] #[ 42 bigint ] unit-test
  #[ 42M ] #[ 42 bigdec ] unit-test
  #[ \* ] #[ 42 char ] unit-test
  #[ true ] #[ 42 number? ] unit-test
  #[ false ] #[ "foo" number? ] unit-test
  #[ 2 ] #[ 5 3 mod ] unit-test
  #[ true ] #[ 2/3 ratio? ] unit-test
  #[ false ] #[ 4/4 ratio? ] unit-test
  #[ 2 ] #[ 2/3 numerator ] unit-test
  #[ 3 ] #[ 2/3 denominator ] unit-test
  #[ true ] #[ 42M decimal? ] unit-test
  #[ false ] #[ 2.3 decimal? ] unit-test
  #[ false ] #[ 42 decimal? ] unit-test
  #[ true ] #[ 4.0 float? ] unit-test
  #[ false ] #[ 2/3 float? ] unit-test
  #[ false ] #[ 42 float? ] unit-test
  #[ true ] #[ 42 rational? ] unit-test
  #[ false ] #[ 2.3 rational? ] unit-test
  #[ true ] #[ :doc #*gershwin.core/type meta contains? ] unit-test
  #[ "bar" ] #[ {:foo "bar"} 'test with-meta meta :foo apply ] unit-test

  ;; Math
  #[ 42 ] #[ 21 21 + ] unit-test
  #[ 441 ] #[ 21 21 * ] unit-test
  #[ 1 ] #[ 41 41 div ] unit-test
  #[ 2/3 ] #[ 2 3 div ] unit-test
  #[ true ] #[ 2 even? ] unit-test
  #[ false ] #[ 3 even? ] unit-test
  #[ true ] #[ 3 odd? ] unit-test
  #[ false ] #[ 2 odd? ] unit-test
  #[ true ] #[ 3 3 - zero? ] unit-test
  #[ false ] #[ 3 3 + zero? ] unit-test

  ;; Bit-wise operations
  #[ 0 ] #[ 0 0 bit-and ] unit-test
  #[ 0 ] #[ 0 1 bit-and ] unit-test
  #[ 0 ] #[ 1 0 bit-and ] unit-test
  #[ 1 ] #[ 1 1 bit-and ] unit-test
  #[ 0 ] #[ 0 0 bit-or ] unit-test
  #[ 1 ] #[ 0 1 bit-or ] unit-test
  #[ 1 ] #[ 1 0 bit-or ] unit-test
  #[ 1 ] #[ 1 1 bit-or ] unit-test
  #[ 0 ] #[ 0 0 bit-xor ] unit-test
  #[ 1 ] #[ 0 1 bit-xor ] unit-test
  #[ 1 ] #[ 1 0 bit-xor ] unit-test
  #[ 0 ] #[ 1 1 bit-xor ] unit-test
  ;; 1011 => 0011
  #[ 3 ] #[ 3 2r1011 bit-clear ] unit-test
  ;; 1011 => 1010
  #[ 10 ] #[ 0 2r1011 bit-clear ] unit-test
  ;; 1011 => 1011
  #[ 11 ] #[ 2 2r1011 bit-clear ] unit-test
  ;; 1011 => 1111
  #[ 15 ] #[ 2 2r1011 bit-set ] unit-test
  ;; 0000 => 0001
  #[ 1 ] #[ 0 2r0000 bit-set ] unit-test
  ;; 1011 => 1011
  #[ 11 ] #[ 0 2r1011 bit-set ] unit-test

  ;; Equality
  #[ true ] #[ (Object.) dup = ] unit-test
  #[ true ] #[ "foo" "foo" = ] unit-test
  #[ true ] #[ :bar :bar = ] unit-test
  #[ true ] #[ 2 2 = ] unit-test
  #[ false ] #[ 2 2.0 = ] unit-test
  #[ true ] #[ 2 2.0 == ] unit-test
  #[ true ] #[ 4.5 45/10 == ] unit-test

  ;; Booleans
  #[ true ] #[ 42 boolean ] unit-test
  #[ true ] #[ 0 boolean ] unit-test
  #[ true ] #[ "" boolean ] unit-test
  #[ true ] #[ [] boolean ] unit-test
  #[ true ] #[ {} boolean ] unit-test
  #[ false ] #[ nil boolean ] unit-test
  #[ false ] #[ false boolean ] unit-test
  #[ "yes" ] #[ 42 "yes" "no" ? ] unit-test
  #[ #[ "yes" ] ] #[ 42 #[ "yes" ] #[ "no" ] ? ] unit-test
  #[ "yes" ] #[ 42 #[ "yes" ] #[ "no" ] if ] unit-test
  #[ "no" ] #[ 42 #[ "yes" ] #[ "no" ] if-not ] unit-test
  #[ "yes" ] #[ true #[ "yes" ] when ] unit-test
  #[ "no" ] #[ false #[ "no" ] when-not ] unit-test
  #[ false ] #[ nil nil or ] unit-test

  ;; Collections
  #[ :foo ] #[ 1 [:bar :foo :baz] nth ] unit-test
  #[ 42 ] #[ "foo" {"foo" 42} get ] unit-test
  #[ {:lang "gershwin"} ]
  #[
    "gershwin" :lang
    {:lang "gershwin"}
    assoc
    ] unit-test
  #[ [1 2 3 4] ] #[ 4 [1 2 3] conj ] unit-test
  #[ '(1 2 3 4) ] #[ 1 '(2 3 4) cons ] unit-test
  #[ {:foo "bar"} ]
  #[
    :lang {:foo "bar" :lang "gershwin"}
    dissoc
    ] unit-test
  #[ 5 ] #[ [1 2 3 4 5] count ] unit-test
  #[ 0 ] #[ '() count ] unit-test
  #[ true ] #[ [] empty? ] unit-test
  #[ false ] #[ [1] empty? ] unit-test
  #[ true ] #[ :foo {:foo "bar"} contains? ] unit-test
  #[ false ] #[ :baz {:foo "bar"} contains? ] unit-test
  #[ :foo ]
  #[
    [:bar :baz :foo :wow]
    #[ #{:foo :other} apply ]
    some
    ] unit-test
  #[ :foo ]
  #[
    #{:foo :other}
    [:bar :baz :foo :wow]
    has-any?
    ] unit-test
  #[ :foo ]
  #[
    [:foo :other]
    [:bar :baz :foo :wow]
    has-any?
    ] unit-test
  #[ :foo ] #[ :foo [:bar :baz :foo] member? ] unit-test
  #[ nil ] #[ :foo [:bar :baz] member? ] unit-test
  #[ [2 4 6 8 10 ] ] #[ [1 2 3 4 5] #[ 2 * ] map ] unit-test
  #[ ["party time" "sleep time" "coding time"] ]
  #[
    ["party" "sleep" "coding"]
    #[ " time" str2 ]
    map
    ] unit-test
  #[ 15 ] #[ [1 2 3 4 5] #[ + ] reduce ] unit-test
  #[ "amanaplanacanalpanama" ]
  #[
    ["a" "man" "a" "plan" "a" "canal" "panama"]
    #[ str2 ]
    reduce
    ] unit-test
  #[ 18 ] #[ [1 2 3 4 5] 3 #[ + ] reduce-with ] unit-test
  #[ "Do Not Play With Fire" ]
  #[
    ["Play " "With " "Fire"]
    "Do Not "
    #[ str2 ]
    reduce-with
    ] unit-test
  #[ [] ] #[ [1 3 5 7] #[ even? ] filter ] unit-test
  #[ [1 3 5 7] ] #[ [1 3 5 7] #[ odd? ] filter ] unit-test
  #[ [] ] #[ [2 4 6 8] #[ even? ] remove ] unit-test
  #[ [2 4 6 8] ] #[ [1 2 3 4 5 6 7 8 9] #[ odd? ] remove ] unit-test
  #[ [5 10 15] ]
  #[
    [1 2 3 4 5 6 7 8 9 10]
    #[ 5 * ] map
    3 take
    ] unit-test
  #[ (sorted-map-by > 1 "a" 2 "b" 3 "c") ]
  #[
    [1 "a" 2 "b" 3 "c"] clojure.core/>
    sorted-map-by*
    ] unit-test

  ;; Core string handling
  #[ "foo\n" ] #[ #[ "foo" println ] with-out-str ] unit-test .
